apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# some metadata about the template itself
metadata:
  name: template-java-spring-boot-rest-api-v1.0
  title: Template Spring Boot REST API v1.0
  description: Plantilla para microservicios en RH Fuse mejorado
  tags:
    - java-springboot
spec:
  owner: group:Arquitectura
  type: service

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Datos principales
      required:
        - name
        - description
      properties:
        name:
          title: Nombre
          type: string
          description: Nombre único del componente
          maxLength: 16
          pattern: '^([a-z]*)(-[a-z]+)*$'
          ui:autofocus: true
        description:
          title: Descripción
          type: string
          description: Finalidad y funcionalidad general
    - title: Repositorio destino
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: OwnerPicker
          ui:options:
            allowedHosts:
              - dev.azure.com
    - title: Datos de gobierno
      required:
        - segment
        - product
        - functional-domain
        - legacy
        - technology
        - integration
        - channels
        - method
      properties:
        train:
          title: Tren
          type: string
          description: Tren
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group
        cell:
          title: Celula
          type: string
          description: Celula
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group
        segment:
          title: Segmento
          type: string
          description: Segmentos de negocio
          enum:
          - b2b
          - b2c
          - convergente
        product:
          title: Producto
          type: string
          description: Asociado a tipos de productos
          enum:
          - fijo
          - movil
          - convergente
          - productos-digitales
          - productos-robustos-b2b
        functional-domain:
          title: Dominio Funcional
          type: string
          description: La línea de servicio esta asociado el desarrollo
          enum:
          - pagos
          - recargas
          - aprovisionamiento
          - facturacion
        legacy:
          title: Legacy
          type: string
          description: Sistema Core con el cual se está integrando
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Component
        technology:
          title: Technology
          type: string
          description: Tecnología en la cual esta implementado el desarrollo
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
               kind: Resource
        integration:
          title: Integration
          type: string
          description: Desarrollo directo o reutilizado
          enum:
          - reuso
          - sin-reuso
          - reuso-aprobacion
        channels:
          title: Channels
          type: string
          description: Canales orígenes que consumen el servicio
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Component  
        method:
          title: Metodo
          type: string
          description: Protocolo en el cual esta expuesto el servicio
          enum:
          - soap
          - rest
        
  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          url: ${{ parameters.repoUrl }}
          segment: ${{ parameters.segment}}
          product: ${{ parameters.product}}
          functional-domain: ${{ parameters.functional-domain}}
          legacy: ${{ parameters.legacy}}
          cell: ${{ parameters.cell}}
          train: ${{ parameters.train}}
          technology: ${{ parameters.technology}}
          integration: ${{ parameters.integration}}
          channels: ${{ parameters.channels}}
          method: ${{ parameters.method}}
   
    - id: publish
      name: Publish
      action: publish:azure
      input:
        allowedHosts: ['dev.azure.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
  
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
        
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
