apiVersion: v1
kind: Template
metadata:
  name: template-${{values.name}}
  annotations:
    description: "Template para generacion del servicio ${{values.name}} para Telefonica"
    iconClass: "icon-rh-integration"
objects:
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${{values.name}}
        app.kubernetes.io/component: ${{values.name}}
        app.kubernetes.io/instance: ${{values.name}}
      name: ${{values.name}}
      namespace: ${{values.name}}
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        app: ${{values.name}}
        deploymentconfig: ${{values.name}}
      strategy:
        activeDeadlineSeconds: 21600
        resources: { }
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
            sidecar.istio.io/inject: "true"
          labels:
            app: ${{values.name}}
            deploymentconfig: ${{values.name}}
        spec:
          containers:
            - name: ${{values.name}}
              env:
                - name: SPRING_APPLICATION_JSON
                  value: '{"server":{"undertow":{"io-threads":10, "worker-threads":80 }}}'
                - name: JAVA_OPTIONS
                  value: -Xms128m -Xmx256m -Dfile.encoding=ISO-8859-1
              image: image-registry.openshift-image-registry.svc:5000/${{values.ns}}/${{values.name}}:latest
              imagePullPolicy: Always
              envFrom:
                - configMapRef:
                    name: configmap-${{values.name}}
                - secretRef:
                    name: secret-${{values.name}}
              resources:
                limits:
                  cpu: 150m
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: { }
          terminationGracePeriodSeconds: 30
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${{values.name}}
        app.kubernetes.io/component: ${{values.name}}
        app.kubernetes.io/instance: ${{values.name}}
      name: service-${{values.name}}
      namespace: ${{values.ns}}
    spec:
      ports:
        - name: http-web
          port: 8080
          protocol: TCP
      selector:
        deploymentconfig: ${{values.name}}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: autoscaling/v2beta2
    kind: HorizontalPodAutoscaler
    metadata:
      labels:
        app: ${{values.name}}
      name: hpa-${{values.name}}
      namespace: ${{values.ns}}
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: DeploymentConfig
        name: ${{values.name}}
      minReplicas: 1
      maxReplicas: 2
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              averageUtilization: 80
              type: Utilization
  - apiVersion: v1
    kind: Secret
    metadata:
      name: sec-${{values.name}}
      namespace: ${{values.ns}}
    type: Opaque
    data:
      service.producer.user: 
      service.producer.password: 
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: configmap-${{values.name}}
      namespace: ${{values.ns}}
    data:
      camel.component.servlet.mapping.context-path: 'URIBASEKEY'
      service.uri: ''
      service.health: '/health'
      service.producer.url: ''
      service.operation: ''
      service.producer.timeout: '1500'
      server.port: '8080'
      spring.jackson.serialization.FAIL_ON_EMPTY_BEANS: 'false'
      service.dvm.error: '[{"9999":"1000"},{"9201":"1002"},{"3004":"1050"},{"3005":"1050"},{"9303":"3000"},{"9306":"3000"},{"9401":"3000"},{"9902":"4000"},{"3002":"4000"},{"9501":"4002"}]'
      management.endpoints.web.exposure.include: health,info,prometheus,metrics
  - apiVersion: networking.istio.io/v1beta1
    kind: DestinationRule
    metadata:
      name: dr-${{values.name}}
      namespace: ${{values.ns}}
    spec:
      host: ${{values.name}}
      trafficPolicy:
        tls:
          mode: ISTIO_MUTUAL
  - apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      name: vs-${{values.name}}
      namespace: ${{values.ns}}
    spec:
      gateways:
        - istio-system/wildcard-gateway
      hosts:
        - '*'
      http:
        - match:
            - uri:
                regex: URIBASEKEY
          route:
            - destination:
                host: ${{values.name}}
                port:
                  number: 8080
